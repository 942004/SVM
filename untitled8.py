# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1antVJ6J9M6-pLsJdZNPuHwQby9wAfMAD
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report
from mlxtend.plotting import plot_decision_regions

# Sample dataset
data = {
    "Email Length": [120, 350, 180, 500],
    "Num. of Special Characters": [5, 12, 2, 15],
    "Num. of Uppercase Letters": [3, 10, 1, 20],
    "Num. of Links": [0, 3, 0, 5],
    "Spam (Target)": [0, 1, 0, 1]
}

# Load dataset into a Pandas DataFrame
df = pd.DataFrame(data)

# Selecting two features for visualization
X = df[["Email Length", "Num. of Special Characters"]]
y = df["Spam (Target)"]

# Normalize numerical features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split dataset into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train SVM model with linear kernel for visualization
svm_model = SVC(kernel='linear', C=1.0)
svm_model.fit(X_train, y_train)

# Predict on test set
y_pred = svm_model.predict(X_test)

# Evaluate model
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, zero_division=1)
recall = recall_score(y_test, y_pred, zero_division=1)
f1 = f1_score(y_test, y_pred, zero_division=1)

print(f"Accuracy: {accuracy:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")
print(f"F1 Score: {f1:.2f}\n")

# Print classification report
print("Classification Report:")
print(classification_report(y_test, y_pred))

# Visualizing decision boundary
plt.figure(figsize=(8, 6))
plot_decision_regions(X_scaled, y.values, clf=svm_model, legend=2)
plt.xlabel("Email Length")
plt.ylabel("Num. of Special Characters")
plt.title("SVM Decision Boundary")
plt.show()